<?php

  namespace App\Http\Controllers\Api\V1\Admin;

  use App\Http\Controllers\Controller;
  use App\Http\Requests\MassDestroyApplyjobRequest;
  use App\Http\Resources\Admin\IncomeResource;

  use App\Applyjob;
  use App\Savejob;
  use App\Profile;
  use App\Apply;
  use App\Jprofile;
  use App\Cbranch;
  use App\Applyjobcat;
  use App\Skill;
  use App\Degree;
  use App\Fstore;
  use App\User;
  use Gate;
  use Illuminate\Http\Request;
  use Illuminate\Support\Facades\DB;
  use Symfony\Component\HttpFoundation\Response;
  use eloquentFilter\QueryFilter\ModelFilters\ModelFilters;


  class ApplyjobApiController extends Controller
  {
    public function index(Request $request)
    {
      abort_if(Gate::denies('naukri_access'), Response::HTTP_FORBIDDEN, '403 Forbidden');

    

    if($request->except(['_token'])){
  $stype ="job";
  $userId = Auth()->user()->id;
  $fstore =  Fstore::withTrashed()->where('created_by_id',$userId)->where('stype', '=', $stype)->first();
  if($fstore)
  {

    if (!is_null($fstore->deleted_at)) {
            $fstore->restore();
        }
 $fstore->update(['sdata' => $request->except(['_token'])]);

  }
  else{
   Fstore::create(['stype' => $stype,'created_by_id' => $userId,'sdata' => $request->except(['_token'])]);
  }


}

      return new IncomeResource(Applyjob::latest()->filter($request->except(['_token']))->where('jstatus','=','Approve')->with('jprofiles','cbranchs:id,name','skills:id,name','degrees:id,name')->withCount(['aplys','savs'])->get());  
    

      
    }


    public function jfdata(Request $request)
    {
      

  $stype ="job";
  $userId = Auth()->user()->id;
  $fstore =  Fstore::where('created_by_id',$userId)->where('stype', '=', $stype)->first();

return  response(['jfdata' =>$fstore]);
     
    }

     public function jfdelete(Request $request)
    {
      

  $stype ="job";
  $userId = Auth()->user()->id;
  $fstore =  Fstore::where('created_by_id',$userId)->where('stype', '=', $stype)->first();
   $fstore->delete();

return  response(['msg' =>"deleted"]);
     
    }


   public function notidata($msg,$uidn)
    {

      $user =User::where('id', $uidn)->first();
      
  $datas = [

              
            'title' => $msg,

            'module' =>  '#',

            'created_by_id' => $uidn

        ];

        
          
              $user->notify(new \App\Notifications\MyDbNotification($datas));
              return;

     
    }



 public function trendjob(Request $request)
    {
      

  
$tad = Applyjob::where('jstatus', '=', 'Approve')->orderBy(DB::raw('jview + jbook'), 'DESC')->limit(5)->with('jprofiles','cbranchs:id,name','skills:id,name','degrees:id,name')->withCount(['aplys','savs'])->get();

return  response(['tdata' =>$tad]);
     
    }


 public function trendjobsrch(Request $request)
    {
      
if($request->get('search')){
        $search = $request->get('search');
  
$tad = Applyjob::where('jstatus', '=', 'Approve') ->where(function($query) use ($search){
                            $query->where('job_t', 'LIKE', '%'.$search.'%')
                                  ->orWhere('jtype', 'LIKE', '%'.$search.'%')
                                  ->orWhere('jminsal', 'LIKE', '%'.$search.'%')
                                  ->orWhere('jminexp', 'LIKE', '%'.$search.'%');
                        })->orderBy(DB::raw('jview + jbook'), 'DESC')->limit(5)->with('jprofiles','cbranchs:id,name','skills:id,name','degrees:id,name')->withCount(['aplys','savs'])->get();

return  response(['tdata' =>$tad]);
}
     
    }


 public function searchjob(Request $request)
    {

   

      if($request->get('search')){
        $search = $request->get('search');
         $employees = Applyjob::latest()
                        ->where('jstatus', 'Approve')
                        ->where(function($query) use ($search){
                            $query->where('job_t', 'LIKE', '%'.$search.'%')
                                  ->orWhere('jtype', 'LIKE', '%'.$search.'%')
                                  ->orWhere('jminsal', 'LIKE', '%'.$search.'%')
                                  ->orWhere('jminexp', 'LIKE', '%'.$search.'%');
                        })
                        ->with('jprofiles','cbranchs:id,name','skills:id,name','degrees:id,name')->withCount(['aplys','savs'])
                        ->limit(15)
                        ->get();
      
   return  response(['data' =>$employees]);
     
  }
   }


    public function getalljob(Request $request)
    {
     
   
          $user_id = Auth()->user()->id;
                  
                    $sav1=Savejob::where('user_id',$user_id)->pluck('job_id');

          $sar = array();  
    foreach ($sav1 as $val) {
array_push($sar, $val);
    }
                       
           $sav2=Apply::where('user_id',$user_id)->pluck('job_id');

            $sar2 = array();  
    foreach ($sav2 as $val) {
array_push($sar2, $val);
    }
                    
                    $sav3 =Applyjob::where('created_by_id',$user_id)->pluck('id');
 $sar3 = array();  
    foreach ($sav3 as $val) {
array_push($sar3, $val);
    }


                   
                   $sind  =array_unique(array_merge($sar,$sar2,$sar3));
               //  return  $sind; 
    
          //$applyjobs=Applyjob::whereIn('id', $sind)->get();
          $applyjobs=Applyjob::latest()->whereIn('id', $sind)->with('jprofiles','cbranchs:id,name','skills:id,name','degrees:id,name')->withCount(['aplys','savs'])->get(); /* Added on 7 April 21 */


   return response(['all_jobs'=>$applyjobs]);
    

    }

    


    public function create()
    {
      abort_if(Gate::denies('naukri_create'), Response::HTTP_FORBIDDEN, '403 Forbidden');
  /*
        
    */
  }

   public function japply(Request $request)
      {

           $user_id = Auth()->user()->id;
           $stest = Applyjob::where('id',$request['jid'])->where('created_by_id',$user_id)->first();
           if($stest)
           {
             $response = "Sorry you can not apply on your posted job";
           return response(['key'=>3, 'msg'=>$response]);

           } /* Commented on 17 Mrch 2021 */
       //   $apply = Apply::where('user_id',$user_id)->first();
        //  if($apply)
          //{
           $apsuc = Apply::create(['user_id' => $user_id,'job_id' => $request['jid']]);
           $jinc = Applyjob::where('id',$request['jid'])->first();

           $jinc->increment('jseeker');
           $jinc->increment('jview');


                
             $msg= 'You Applied this job '.$jinc['job_t'].' successfully';
              $uidn=$user_id;
                self::notidata($msg,$uidn);
                  $uidn=$jinc['created_by_id'];
                  $msg= 'Someone applied to your Job '.$jinc['job_t'].' ';
                  self::notidata($msg,$uidn);
                
               $response = "applied successfully";
          
                 return  response(['key'=>4, 'msg'=>$response])
             ->setStatusCode(Response::HTTP_ACCEPTED);
      

       /*   }
          else{

            $profile = Profile::where('created_by_id',$user_id)->where('prog',100)->first();
            
            if($profile)
              {
                 $response = "Profile 100% are you wanted to update to update resume";
                    return  response(['key'=>1,  'msg'=> $response])
             ->setStatusCode(Response::HTTP_ACCEPTED);
     


              }
              else
              {
                $response = "Profile not 100 so redirect to profile section";
                  return  response(['key'=>2, 'msg'=>$response])
             ->setStatusCode(Response::HTTP_ACCEPTED);

              }
         

          }
   */
      }

 public function joapply(Request $request)
      {

    
        $user_id = Auth()->user()->id;
           $apsuc = Apply::create(['user_id' => $user_id,'job_id' => $request['jid']]);
           $jinc = Applyjob::where('id',$request['jid'])->first();

           $jinc->increment('jseeker');
           $jinc->increment('jview');
             $msg= 'You Applied this job '.$jinc['job_t'].' successfully';
              $uidn=$user_id;
                self::notidata($msg,$uidn);
                  $uidn=$jinc['created_by_id'];
                  $msg= 'Someone applied to your Job '.$jinc['job_t'].' ';
                  self::notidata($msg,$uidn);
    $response = "applied successfully";
               
                 return  response(['jobaplly'=>$response])
             ->setStatusCode(Response::HTTP_ACCEPTED);


      }

 public function applicantd(request $request)
      {

$job =$request->job;
  $profiles=Apply::leftjoin('profiles', 'user_job.user_id', '=', 'profiles.created_by_id')
                ->where('user_job.job_id', $job)->get();

      return response(['viewapply'=>$profiles]);


      }




 public function jobsave(Request $request){

    $userId = Auth()->user()->id;



    $a_like = Savejob::withTrashed()->where('user_id',$userId)->where('job_id', '=', $request->job)->first();

    if (is_null($a_like)) {
        $savejob = Savejob::create(['user_id' => $userId,'job_id' => $request->job]);
        Applyjob::where('id', '=', $request->job)->increment('jbook');
        $output = '1';
        return response(['bookmarked'=>$output]);
        
    } else {
        if (is_null($a_like->deleted_at)) {
            $a_like->delete();
            Applyjob::where('id', '=', $request->job)->decrement('jbook');
            $output = '2';
            return response(['No bookmarked'=>$output]);
            
        } else {
            $a_like->restore();
           Applyjob::where('id', '=', $request->job)->increment('jbook');
            $output = '1';
            return response(['Again bookmarked'=>$output]);
           
        }
    }

}


      public function store(Request $request)
      {

      //  $ip = request()->ip();

        $ads = Apply::where('user_id',$request['uid'])->where('job_id',$request['jid'])->update(['status' => $request['jstatus']]);

      
  

        return response(['applicant status'=>$ads]);
      }


  public function getsavejob(Request $request)
    {
     
          $user_id = Auth()->user()->id;

                    $savj=Savejob::where('user_id',$user_id)->select('job_id')->get();


          $applyjobs=Applyjob::latest()->whereIn('id', $savj)->with('jprofiles','cbranchs:id,name','skills:id,name','degrees:id,name')->withCount(['aplys','savs'])->get();
    //  $jobs = DB::table('jobs')
     //   ->rightJoin('save_job', 'jobs.id', '=', 'save_job.job_id')
     //   ->where('save_job.user_id', $user_id)
      //   ->select('jobs.*')->get(); 

   return response(['user save jobs'=>$applyjobs]);
    

    }

     public function getappliedjob(Request $request)
    {
       // abort_if(Gate::denies('ubio_show'), Response::HTTP_FORBIDDEN, '403 Forbidden');
          $user_id = Auth()->user()->id;

                    $savj=Apply::where('user_id',$user_id)->select('job_id')->get();


          $applyjobs=Applyjob::latest()->whereIn('id', $savj)->with('jprofiles','cbranchs:id,name','skills:id,name','degrees:id,name')->withCount(['aplys','savs'])->get();
    //  $jobs = DB::table('jobs')
     //   ->rightJoin('save_job', 'jobs.id', '=', 'save_job.job_id')
     //   ->where('save_job.user_id', $user_id)
      //   ->select('jobs.*')->get(); 
return response(['user applied jobs'=>$applyjobs]);
   
    }

      public function edit(Applyjob $applyjob)
      {
        abort_if(Gate::denies('naukri_edit'), Response::HTTP_FORBIDDEN, '403 Forbidden');

        

        return view('admin.Applyjobs.edit', compact('applyjob_categories', 'applyjob'));
      }

      public function update(UpdateApplyjobRequest $request, Applyjob $applyjob)
      {
        $Applyjob->update($request->all());

        return response(['apply job'=>'updated success']);
      
}
      public function show(Applyjob $applyjob)
      {
        //abort_if(Gate::denies('naukri_show'), Response::HTTP_FORBIDDEN, '403 Forbidden');
        $job=$applyjob;
        
      
                 $job->increment('jview');
                // dd($applyjob->increment('jview'));
               //  die("jio");

        $applyjob->load('jprofiles', 'cbranchs', 'skills', 'degrees');

        return response(['job details'=>$applyjob]);
      }

      public function destroy(Applyjob $applyjob)
      {
        abort_if(Gate::denies('naukri_delete'), Response::HTTP_FORBIDDEN, '403 Forbidden');

        //$Applyjob->delete();

        return back();
      }

   
  }
